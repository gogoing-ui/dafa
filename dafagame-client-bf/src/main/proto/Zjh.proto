syntax = "proto2";

package com.dafagame.protocol.zjh;

//option optimize_for = LITE_RUNTIME;

enum GameType {
    ZJH = 201;
}
//
enum Status {
    Idel = 1;             //空闲      无限时间
    StartWaiting = 2;     //开局等待   5秒
    Playing = 3;          //游戏中
    Lottery = 4;          //结算
    Compare = 5;          //比牌动画播放
}

enum PlayerStatus{
    //旁观
    Bystander = 1;
    //游戏中
    Play = 2;
    //输
    Lose = 3;
    //比牌输
    CLose = 4;
}

//
enum PokerType {
    ER_SAN_WU = 0;        //特殊235不同花色
    DAN_ZHAN = 1;         //高牌
    DUI_ZI = 2;           //对子
    SHUN_ZI = 3;          //顺子
    JIN_HUA = 4;          //同花
    SHUN_JIN = 5;         //顺金
    BAO_ZI = 6;           //豹子
}

//消息号
enum ProtoType {
    FollowEndReqType = 20101;       //跟到底
    FollowEndResNtfType = 20108;    //跟到底回应广播

    BetReqType = 20102;             //下注
    BetResNtfType = 20109;          //下注回应广播

    SeeCardReqType = 20103;         //看牌
    SeeCardResType = 20110;         //看牌回应
    SeeCardNtfType = 20119;         //看牌广播

    CompareReqType = 20104;       //比牌
    CompareResNtfType = 20111;   //比牌回应广播

    GiveUpReqType = 20105;          //弃牌
    GiveUpResNtfType = 20112;       //弃牌回应/广播

    StudReqType = 20106;            //梭哈
    StudResNtfType = 20113;         //梭哈回应广播

    AllInReqType = 20107;           //金额不足全下比牌
    AllInResNtfType = 20114;        //金额不足全下比牌回应广播

    StartGameNtfType = 20115;       //游戏开始

    EnterRoomNtfType = 20116; //玩家进入房间广播

    ExitRoomNtfType = 20117;  //玩家退出房间广播

    ScenesDataType = 20118; //玩家进入房间场景数据

    OffLineNtfType = 20120;       //用户断线广播
    ReConnectNtfType = 20121;       //用户重连广播

    OffLineWaitingNtfType = 20122;      //断线等待广播

    IdelGameNtfType = 20123;            //房间空闲广播

    WaittingStartNtfType = 20124;       //等待开始广播

    FollowStudReqType = 20125;          //跟梭哈
    FollowStudResNtfType = 20126;       //跟梭哈回应广播

    SystemCompareNtfType = 20127;       //系统比牌

    CleanFollowEndReqType = 20128;      //取消跟到底
    CleanFollowEndResNtfType = 20129;   //取消跟到底回应广播

    NextActionNtfType = 20130;   //下一个操作广播

    GameOverNtfType = 20131;

    GameMaintainNtfType = 20132;      //游戏维护

    RobotMsgType = 20133;

    RobotExitMsgType = 20134;

    ScenesReqType = 20135;              //场景请求

    GameRuleReqType = 20136;

    GameRuleResType = 20137;
}

enum ErrorCode {
    OK = 1;
    ChipError = 2;  //筹码错误
    NotOptPlayer = 3;   //不是该玩家操作
    NotInPlaying = 4;   //不在游戏中
    NotEnoughBalance = 5;   //余额不足
    FirstRingCantCompare = 6; //第一轮不能比牌
    NonePlayer = 7;           //玩家不存在
}

//玩家进入房间场景数据
message ScenesData{
    repeated double addChipEnum = 1;        //房间加注类型
    optional double baseChip = 2;           //底注
    optional int32 ring = 3;                //当前游戏圈数
    repeated PlayerInfo others = 4;        //其他玩家
    optional int32 opt = 5;                 //当前操作玩家
    optional int64  optTime = 6;            //操作时间
    optional string roomNumber = 7;         //房号
    optional string inning = 8;             //局号
    optional Status roomStatus = 9;         //房间状态
    optional string roomPreBet = 10;        //房间当前下注
    optional bool roomPreDark = 11;         //是否闷牌
    optional string roundType = 12;          //场次类型
    optional int32 maxRing = 13;            //最大圈数
    optional PlayerInfo own = 14;           //自己
    optional int32 banker = 15;             //庄家
    optional int32 maxOptTime = 16;
    optional int32 studeSeat = 17;          //如果有梭哈
}

//游戏开始
message StartGameNtf{
    optional int32 opt = 1;             //操作玩家
    repeated int32 gamePlayers = 2;     //参与游戏的玩家
    optional int64 time = 3;            //操作时间
    optional string inning = 4;         //局号
    optional int32 banker = 5;          //庄家
    optional bool kill = 6;
}
//机器人消息
message RobotMsg{
    repeated int32 cards = 1;
    repeated int32 gamePlayers = 2;     //参与游戏的玩家
    optional string cs = 3;             //牌
    repeated int32 real = 4;
}

message RobotExitMsg{
    optional string roundType = 1;
    optional string roomNumber = 2;
    optional bool isExtra = 3;          //是否是多余房间
    optional bool isMaintain = 4;       //是否维护
    optional int32 realCount = 5;       //真人玩家
    optional int32 playerCount = 6;     //房间人数
    optional bool isMatchPlayer = 7;    //是否优先匹配玩家
}

//房间空闲广播
message IdelGameNtf{

}

//玩家信息结构
message PlayerInfo{
    optional int32 seatId = 1;          //座位
    optional int32 grade = 2;           //vip
    optional string nickName = 3;       //昵称
    optional int32 avatar = 4;          //头像
    optional string balance = 5;        //余额
    optional PlayerStatus status = 6;   //游戏中的状态
    optional int32 frame = 7;           //相框
    optional string totalBet = 8;       //当前总下注
    optional bool isOffLine = 9;        //是否断线
    optional bool isDark = 10;          //是否闷牌
    optional string cards = 11;
    optional int32 cardsType = 12;
    optional int32 type = 13;           //0 玩家  -1测试账号 1 - 4 机器人类型
    optional bool isFollowEnd = 14;       //是否跟到底
}

//玩家进入房间通知
message EnterRoomNtf{
    optional PlayerInfo player = 1;     //玩家信息
}

//玩家退出房间通知
message ExitRoomNtf{
    optional int32 seatId = 1;         //座位
}

//下注请求
message BetReq{
    required string chip = 1;
}

//下注回应/广播 失败只发给操作玩家  成功广播给所有玩家
message BetResNtf{
    optional ErrorCode code = 1;
    optional int32 opt = 2;             //操作玩家
    optional string betChip = 3;        //下注筹码
    optional bool isDark = 4;           //下注时知否暗牌
}

//跟到底请求
message FollowEndReq{
}

//跟到底回应广播
message FollowEndResNtf{
    optional ErrorCode code = 1;
    optional int32 opt = 2;             //操作玩家
}

//看牌
message SeeCardReq{
}

//看牌回应
message SeeCardRes{
    optional ErrorCode code = 1;
    optional string cards = 2;     //手牌
    optional int32 cardsType = 3;
    optional bool seeCard = 4;
}

//看牌广播
message SeeCardNtf{
    required int32 opt = 1;         //看牌玩家
}

//选择比牌请求
message CompareReq{
    required int32 other = 1;     //与谁比牌
}

//选择比牌回应/广播
message CompareResNtf{
    optional ErrorCode code = 1;
    optional int32 opt = 2;             //操作玩家
    optional int32 other = 3;           //被比玩家
    optional string betChip = 4;        //操作总下注筹码
    optional int32 winner = 5;           //赢家
    optional int64 time = 6;            //比牌时间
    optional int32 realCount = 7;       //真人数量
}

//弃牌
message GiveUpReq{

}
//弃牌回应/广播
message GiveUpResNtf{
    optional ErrorCode code = 1;
    optional int32 opt = 2;             //操作玩家
    optional int32 ring = 3;
    optional int32 realCount = 4;       //真人数量
}

//梭哈
message StudReq{
}

//梭哈回应/广播
message StudResNtf{
    optional ErrorCode code = 1;
    optional int32 opt = 2;             //操作玩家
    optional int32 nextOpt = 3;         //下一个操作玩家
    optional string betChip = 4;        //下注筹码
    optional int64 time = 5;
    optional int32 ring = 6;
    optional bool isDark = 7;           //是否暗牌梭哈
}

//全下请求
message AllInReq{

}
//全下请求回应/广播
message AllInResNtf{
    optional ErrorCode code = 1;
    optional int32 opt = 2;             //操作玩家
    optional int32 ring = 3;
    optional string betChip = 4;
}

//用户断线
message OffLineNtf{
    optional int32 seatId = 1;
}
//用户重连
message ReConnectNtf{
    required int32 seatId = 1;
}

//掉线等待广播
message OffLineWaitingNtf{
    optional int32 seatId = 1;  //掉线座位
    optional int64 time = 2;
}

//等待开始5秒通知
message WaittingStartNtf{
    optional int64 time = 1;
}

message GameOverNtf{
    optional int32 winner = 1;
    optional string returnAmount = 2; //派彩金额
    optional string balance = 3;
    repeated string cards = 4;
    repeated int32 cardsType = 5;
    optional int32 overSeat = 6;      //退还玩家
    optional string overAmount = 7;   //退还金额
    optional string compared = 8;
}

//跟梭哈
message FollowStudReq{

}

message FollowStudResNtf{
    optional int32 opt = 1;
    optional string betChip = 2;
    optional int32 ring = 3;
}


message SystemCompareNtf{
    optional int32 winner = 1;       //赢家
    repeated CompareInfo info = 2;  //各自比牌结果
    optional bool isOver = 3;       //游戏是否结束
    optional int64 time = 4;
    optional int32 realCount = 5;       //真人数量
}

message CompareInfo{
    optional int32 opt = 1;
    optional int32 other = 2;
    optional int32 winner = 3;
}

message CleanFollowEndReq{

}

message CleanFollowEndResNtf{
    optional int32 opt = 1;
    optional ErrorCode code = 2;
}


message NextActionNtf{
    optional int32 opt = 1;     //操作玩家
    optional int64 time = 2;     //时间
    optional int32 ring = 3;     //轮数
}

message GameMaintainNtf {
    optional int32 state = 1;               //0开启  1 维护
}

message ScenesReq{
    required string roundType = 1;
}

message GameRuleReq{
}

message GameRuleRes{
    optional double service = 1;             //服务费
}

